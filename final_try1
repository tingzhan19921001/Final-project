import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

def ReadcsvTodf(input_file):

    #input_file = input('Give me a file')
    df = pd.read_csv(input_file)

    years = np.array(df['Year'])
    list_years = list(df.axes[0])
    total_rows = len(list_years)
    #print(total_rows)
    return df,total_rows
#ReadcsvTodf()
def RegressionFit(x,y,n):
    """
    this function is to calculate the coefficients for polynomial
    :return:
    """
    return np.polyfit(x,y,n)
def FitPlot(x,p,color='b-'):
    """
    this function is to plot the fit line
    :return:
    """

    return plt.plot(x, np.polyval(p,x),color)
pass
def MSE(y,y_estimate):
    """
    this function is to get minimal squared error to figure out the best fit
    :retu
    """

    return np.square(np.subtract(y, y_estimate)).mean()


def FitCurve(x,y):
    #df, total_rows = ReadcsvTodf('test.csv')
    #x = np.arange(1, total_rows+1 )
    #y = np.array(df['Population'])

    p1 = RegressionFit(x, y, 1)
    p2 = RegressionFit(x, y, 2)
    p3 = RegressionFit(x, y, 3)


    return p1, p2, p3
#FitCurve()

def NumberofHouseholdShopWalmart():

    df, total_rows = ReadcsvTodf('test.csv')
    #df2, total_rows2 = ReadcsvTodf('test2.csv')
    #print(df)
    print(total_rows)

    x = np.arange(1,total_rows+1)

    y = np.array(df['Population'])

    p1, p2, p3 = FitCurve(x,y)

    #after obeservation, p3 fit the graph most
    print(p3)



    next_x = 20
    line = np.poly1d(p3)
    next_y_shop = line(next_x)

    mean_squared_error = []

    for i in range(len(x)):
        #print(MSE(y[i], line(x[i])))
        mean_squared_error.append(MSE(y[i],line(x[i])))

    ## to continue about the mean squared errror.



    #plt.plot(x, y, 'o')

    #FitPlot(x, p1, color='r-')
    #FitPlot(x, p2, color='b-')
    #FitPlot(x, p3, color='y-')
    # print(p1)
    print('Number of households that shopped at Walmart Supercenter grocery stores \n within the last 7 days in the United States from spring 2008 to spring 2017 (in millions)',next_y_shop)
    #print(population)
    return next_y_shop

#NumberofHouseholdShopWalmart()

def NumberofHousehold():
    """
    This function will get how many Number of household in US.

    :return:
    """
    df = pd.read_excel('test_household.xlsx')
    #print(df)

    years = np.array(df['Year'])
    list_years = list(df.axes[0])
    total_rows = len(list_years)


    x = np.arange(1, total_rows + 1)

    #print(x)

    y = np.array(df['Household'])

    p1, p2, p3 = FitCurve(x, y)

    print(p2)

    plt.plot(x, y, 'o')

    plt.plot(x, np.polyval(p1, x), 'r-')
    plt.plot(x, np.polyval(p2, x), 'b-')
    plt.plot(x, np.polyval(p3, x), 'g-')

    #plt.show()
    # p2 is the best fit
    next_x = 49
    line = np.poly1d(p2)
    next_y_household = line(next_x)
    print('In 2017 the number of household in US is(in millions): ',next_y_household)
    #x = np.arange(1,total_rows+1)

    #y = np.array(df['Number of households '])

    #print(x)
    #print(y)
    return next_y_household
#NumberofHousehold()

def ConversionRate(a,b):
    rate = a/7/b
    print(rate)

    return rate

def Customer():

    c = np.random.poisson(1.03, 1000)
    count,bins,ignored = plt.hist(c,9,normed = True)
    plt.show()

Customer()


class Income():
    """
    Income = Number of Sales(S) * Profit per Sale(p)

    """

    def __init__(self,number_of_sale, profit_per_sale):

        self.number_of_sale = number_of_sale
        self.profit_per_sale = profit_per_sale

    pass

    def NumberSale(self,customer_volume, ConversionRate):
        """

        :return:
        """
        number_of_sale = customer_volume * ConversionRate
        return number_of_sale

    pass
    def ProfitperSale(self,cost_of_goodsold):
        """
        :return:

        >>> Income.ProfitperSale(Income, 200)
        60.0
        """
        profit_per_sale = 0.3 * cost_of_goodsold
        return profit_per_sale

    pass
class overhead():
    def _init_(self,rent=0,utility_bills=0,insurance=0,technology=0,marketing=0,salaries=0 ):
        self.rent = rent
        self.utility_bills = utility_bills
        self.insurance = insurance
        self.technology = technology
        self.marketing = marketing
        self.salaries = salaries
    @property
    def rent(self):
        """

        :return:
        """
        return self.rent

    @property
    def utility_bills(self):
        """

        :return:
        """
        return self.utility_bills


    @property
    def insurance(self):
        """

        :return:
        """
        return self.insurance

    @property
    def technology(self):
        """

        :return:
        """
        return self.technology

    @property
    def marketing(self):
        """

        :return:
        """
        return self.marketing

    @property
    def salaries(self):
        """

        :return:
        """
        return self.salaries

class profit_perhour():
    def _init_(self,max_time):
        """

        :param max_time:
        :return:
        """
        self.max_time = max_time

    def profit(self,time_end):
        """

        :param time_end:
        :return:
        """
        self.time = np.arrange(0,time_end)
        return self.time

    def time_dis(self):
        """

        :return:
        """
        self.time_dis = np.poisson(self.time, self.max_time )
        return self.time_dis.random()

class profit_persale():
    def _init_(self,size=0):
        """

        :param size:
        :return:
        """
        self.size = size

    def profit(self):
        """

        :return:
        """
        self.profit = np.random.uniform(0,500,self.size)







'''
p = profit_perhour(18)
p.profit(24)
p.time_dis
'''

class expense():
    def _init_(self,overhead=0,cost = 0):

